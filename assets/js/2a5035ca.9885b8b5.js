(self.webpackChunkprofiles_dev=self.webpackChunkprofiles_dev||[]).push([[8324],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),f=p(n),m=o,d=f["".concat(c,".").concat(m)]||f[m]||u[m]||a;return n?r.createElement(d,l(l({ref:t},s),{},{components:n})):r.createElement(d,l({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3200:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return f}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),l=["components"],i={},c="install",p={unversionedId:"pctl/pctl-install-cmd",id:"pctl/pctl-install-cmd",isDocsHomePage:!1,title:"install",description:"`",source:"@site/docs/pctl/pctl-install-cmd.md",sourceDirName:"pctl",slug:"/pctl/pctl-install-cmd",permalink:"/docs/pctl/pctl-install-cmd",editUrl:"https://github.com/weaveworks/profiles/edit/main/userdocs/profiles.dev/docs/pctl/pctl-install-cmd.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Catalog source schema",permalink:"/docs/catalog-docs/catalog-source-schema"},next:{title:"list",permalink:"/docs/pctl/pctl-list-cmd"}},s=[],u={toc:s};function f(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"install"},"install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"NAME:\n   pctl install - generate a profile installation\n\nUSAGE:\n   To install from a profile catalog entry: pctl --catalog-url <URL> install --name pctl-profile --namespace default --profile-branch main --config-map configmap-name <CATALOG>/<PROFILE>[/<VERSION>]\n   To install directly from a profile repository: pctl install --name pctl-profile --namespace default --profile-branch development --profile-url https://github.com/weaveworks/profiles-examples --profile-path bitnami-nginx\n\nOPTIONS:\n   --name value            The name of the installation. (default: pctl-profile)\n   --namespace value       The namespace to use for generating resources. (default: default)\n   --profile-branch value  The branch to use on the repository in which the profile is. (default: main)\n   --config-map value      The name of the ConfigMap which contains values for this profile.\n   --create-pr             If given, install will create a PR for the modifications it outputs. (default: false)\n   --pr-remote value       The remote to push the branch to. (default: origin)\n   --pr-base value         The base branch to open a PR against. (default: main)\n   --pr-branch value       The branch to create the PR from. Generated if not set.\n   --out value             Optional location to create the profile installation folder in. This should be relative to the current working directory. (default: current)\n   --pr-repo value         The repository to open a pr against. Format is: org/repo-name.\n   --profile-url value     Optional value defining the URL of the profile.\n   --profile-path value    Value defining the path to a profile when url is provided. (default: <root>)\n   --git-repository value  The namespace and name of the GitRepository object governing the flux repo.\n   \n")))}f.isMDXComponent=!0}}]);