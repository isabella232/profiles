(self.webpackChunkprofiles_dev=self.webpackChunkprofiles_dev||[]).push([[285],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return f},kt:function(){return m}});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},f=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,d=u["".concat(c,".").concat(m)]||u[m]||l[m]||r;return n?i.createElement(d,a(a({ref:t},f),{},{components:n})):i.createElement(d,a({ref:t},f))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<r;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2375:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return f},default:function(){return u}});var i=n(2122),o=n(9756),r=(n(7294),n(3905)),a=["components"],s={sidebar_position:7},c="Profile definition schema",p={unversionedId:"author-docs/profile-definition-schema",id:"author-docs/profile-definition-schema",isDocsHomePage:!1,title:"Profile definition schema",description:"`go",source:"@site/docs/author-docs/profile-definition-schema.md",sourceDirName:"author-docs",slug:"/author-docs/profile-definition-schema",permalink:"/profiles/docs/author-docs/profile-definition-schema",editUrl:"https://github.com/weaveworks/profiles/edit/main/userdocs/profiles.dev/docs/author-docs/profile-definition-schema.md",version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Default artifact values",permalink:"/profiles/docs/author-docs/default-values"},next:{title:"Versioning",permalink:"/profiles/docs/author-docs/versioning"}},f=[],l={toc:f};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"profile-definition-schema"},"Profile definition schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// ProfileDefinitionSpec defines the desired state of ProfileDefinition\ntype ProfileDefinitionSpec struct {\n    ProfileDescription `json:",inline"`\n    // Artifacts is a list of Profile artifacts\n    Artifacts []Artifact `json:"artifacts,omitempty"`\n}\n\n// ProfileDescription defines details about a given profile.\ntype ProfileDescription struct {\n    // Profile description\n    Description string `json:"description,omitempty"`\n    // Maintainer is the name of the author(s)\n    // +optional\n    Maintainer string `json:"maintainer,omitempty"`\n    // Prerequisites are a list of dependencies required by the profile\n    // +optional\n    Prerequisites []string `json:"prerequisites,omitempty"`\n}\n\n// Artifact defines a bundled resource of the components for this profile.\ntype Artifact struct {\n    // Name is the name of the Artifact\n    Name string `json:"name,omitempty"`\n    // Chart defines properties to access a remote chart.\n    // This is an optional value. It is ignored in case Path is defined.\n    // +optional\n    Chart *Chart `json:"chart,omitempty"`\n    // Profiles defines properties to access a remote profile.\n    // +optional\n    Profile *Profile `json:"profile,omitempty"`\n    // Kustomize defines properties to for a kustmize artifact.\n    // +optional\n    Kustomize *Kustomize `json:"kustomize,omitempty"`\n}\n\ntype Kustomize struct {\n    // Path is the local path to the Artifact in the Profile repo.\n    Path string `json:"path,omitempty"`\n}\n\n// Chart defines properties to access remote helm charts.\ntype Chart struct {\n    // URL is the URL of the Helm repository containing a Helm chart and possible values\n    // +optional\n    URL string `json:"url,omitempty"`\n    // Name defines the name of the chart at the remote repository\n    // +optional\n    Name string `json:"name,omitempty"`\n    // Version defines the version of the chart at the remote repository\n    // +optional\n    Version string `json:"version,omitempty"`\n    // Path is the local path to the Artifact in the Profile repo.\n    // This is an optional value. If defined, it takes precedence over other Chart fields.\n    // +optional\n    Path string `json:"path,omitempty"`\n    // DefaultValues holds the default values for this Helm release Artifact.\n    // These can be overridden by the user, but will otherwise apply.\n    // +optional\n    DefaultValues string `json:"defaultValues,omitempty"`\n}\n\n// Profile defines properties for accessing a profile\ntype Profile struct {\n    // Source defines properties of the source of the profile\n    Source *Source `json:"source,omitempty"`\n}\n\n// Source defines the location of the profile\ntype Source struct {\n    // ProfileURL is a fully qualified URL to a profile repo\n    URL string `json:"url,omitempty"`\n\n    // Branch is the git repo branch containing the profile definition (default: main)\n    // +kubebuilder:default:=main\n    // +optional\n    Branch string `json:"branch,omitempty"`\n\n    // Path is the location in the git repo containing the profile definition\n    // +optional\n    Path string `json:"path,omitempty"`\n\n    // Tag is the git tag containing the profile definition\n    // +optional\n    Tag string `json:"tag,omitempty"`\n}\n')))}u.isMDXComponent=!0}}]);