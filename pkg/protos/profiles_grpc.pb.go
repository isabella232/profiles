// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfilesServiceClient is the client API for ProfilesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilesServiceClient interface {
	// Get will return a specific profile from the catalog
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// GetWithVersion will return a specific profile from the catalog
	GetWithVersion(ctx context.Context, in *GetWithVersionRequest, opts ...grpc.CallOption) (*GetWithVersionResponse, error)
	// ProfilesGreaterThanVersion returns all profiles which are of a greater version for a given profile with a version.
	ProfilesGreaterThanVersion(ctx context.Context, in *ProfilesGreaterThanVersionRequest, opts ...grpc.CallOption) (*ProfilesGreaterThanVersionResponse, error)
	// Search will return a list of profiles which match query
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type profilesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilesServiceClient(cc grpc.ClientConnInterface) ProfilesServiceClient {
	return &profilesServiceClient{cc}
}

func (c *profilesServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/weave.works.profiles.v1.ProfilesService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) GetWithVersion(ctx context.Context, in *GetWithVersionRequest, opts ...grpc.CallOption) (*GetWithVersionResponse, error) {
	out := new(GetWithVersionResponse)
	err := c.cc.Invoke(ctx, "/weave.works.profiles.v1.ProfilesService/GetWithVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) ProfilesGreaterThanVersion(ctx context.Context, in *ProfilesGreaterThanVersionRequest, opts ...grpc.CallOption) (*ProfilesGreaterThanVersionResponse, error) {
	out := new(ProfilesGreaterThanVersionResponse)
	err := c.cc.Invoke(ctx, "/weave.works.profiles.v1.ProfilesService/ProfilesGreaterThanVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/weave.works.profiles.v1.ProfilesService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesServiceServer is the server API for ProfilesService service.
// All implementations should embed UnimplementedProfilesServiceServer
// for forward compatibility
type ProfilesServiceServer interface {
	// Get will return a specific profile from the catalog
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// GetWithVersion will return a specific profile from the catalog
	GetWithVersion(context.Context, *GetWithVersionRequest) (*GetWithVersionResponse, error)
	// ProfilesGreaterThanVersion returns all profiles which are of a greater version for a given profile with a version.
	ProfilesGreaterThanVersion(context.Context, *ProfilesGreaterThanVersionRequest) (*ProfilesGreaterThanVersionResponse, error)
	// Search will return a list of profiles which match query
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
}

// UnimplementedProfilesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProfilesServiceServer struct {
}

func (UnimplementedProfilesServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProfilesServiceServer) GetWithVersion(context.Context, *GetWithVersionRequest) (*GetWithVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithVersion not implemented")
}
func (UnimplementedProfilesServiceServer) ProfilesGreaterThanVersion(context.Context, *ProfilesGreaterThanVersionRequest) (*ProfilesGreaterThanVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfilesGreaterThanVersion not implemented")
}
func (UnimplementedProfilesServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

// UnsafeProfilesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilesServiceServer will
// result in compilation errors.
type UnsafeProfilesServiceServer interface {
	mustEmbedUnimplementedProfilesServiceServer()
}

func RegisterProfilesServiceServer(s grpc.ServiceRegistrar, srv ProfilesServiceServer) {
	s.RegisterService(&ProfilesService_ServiceDesc, srv)
}

func _ProfilesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weave.works.profiles.v1.ProfilesService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_GetWithVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).GetWithVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weave.works.profiles.v1.ProfilesService/GetWithVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).GetWithVersion(ctx, req.(*GetWithVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_ProfilesGreaterThanVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfilesGreaterThanVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).ProfilesGreaterThanVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weave.works.profiles.v1.ProfilesService/ProfilesGreaterThanVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).ProfilesGreaterThanVersion(ctx, req.(*ProfilesGreaterThanVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilesService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weave.works.profiles.v1.ProfilesService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfilesService_ServiceDesc is the grpc.ServiceDesc for ProfilesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfilesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weave.works.profiles.v1.ProfilesService",
	HandlerType: (*ProfilesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProfilesService_Get_Handler,
		},
		{
			MethodName: "GetWithVersion",
			Handler:    _ProfilesService_GetWithVersion_Handler,
		},
		{
			MethodName: "ProfilesGreaterThanVersion",
			Handler:    _ProfilesService_ProfilesGreaterThanVersion_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ProfilesService_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profiles.proto",
}
